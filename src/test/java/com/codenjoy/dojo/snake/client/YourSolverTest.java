package com.codenjoy.dojo.snake.client;

import com.codenjoy.dojo.services.RandomDice;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

/**
 * Created by oleksandr.baglai on 01.12.2015.
 */
public class YourSolverTest {
    @Test
    public void testSameDirection() {
        assertB("☼☼☼☼☼☼" +
                "☼ ☻   ☼" +
                "☼ ╓   ☼" +
                "☼ ▼  ☼" +
                "☼ ☺  ☼" +
                "☼☼☼☼☼☼", "DOWN");

        assertB("☼☼☼☼☼☼" +
                "☼  ☻  ☼" +
                "☼    ☼" +
                "☼╘► ☺ ☼" +
                "☼    ☼" +
                "☼☼☼☼☼☼", "RIGHT");

        assertB("☼☼☼☼☼☼" +
                "☼   ☻ ☼" +
                "☼ ☺  ☼" +
                "☼ ▲  ☼" +
                "☼ ╙  ☼" +
                "☼☼☼☼☼☼", "UP");

        assertB("☼☼☼☼☼☼" +
                "☼    ☻☼" +
                "☼☺  ◄╕☼" +
                "☼    ☼" +
                "☼    ☼" +
                "☼☼☼☼☼☼", "LEFT");

    }

    @Test
    public void testEatMe() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼╔═════════►  ☼" +
                "☼╙            ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼        ☺    ☼" +
                "☼          ☻  ☼" +
                "☼             ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "DOWN");
    }

    @Test
    public void testEatKek() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼                  ☼" +
                "☼                  ☼" +
                "☼                  ☼" +
                "☼                  ☼" +
                "☼                  ☼" +
                "☼                  ☼" +
                "☼                  ☼" +
                "☼                  ☼" +
                "☼                  ☼" +
                "☼                  ☼" +
                "☼    ☺   ☻  ◄╕   ☼" +
                "☼                  ☼" +
                "☼                  ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "UP");
    }

    @Test
    public void testEatBreak() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼   ☺    ☻◄╕  ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "DOWN");
    }

    @Test
    public void testEatkek1() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼   ☺   ☻     ☼" +
                "☼       ▲     ☼" +
                "☼       ╙     ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "LEFT");
    }

    @Test
    public void testEatkek2() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼   ☺ ◄╕☻     ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "LEFT");
    }

    @Test
    public void testEatkek3() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼ ╘╗   ☻   ☺  ☼" +
                "☼  ▼           ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "RIGHT");
    }

    @Test
    public void testEatkek4() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼             ☼" +
                "☼ ╔╗▲☻        ☼" +
                "☼ ║╚╝       ☺ ☼" +
                "☼ ║           ☼" +
                "☼ ╚═╕         ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "UP");
    }

    @Test
    public void testEatNMe3() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼             ☼" +
                "☼   ╔╕        ☼" +
                "☼   ║         ☼" +
                "☼   ║         ☼" +
                "☼   ║         ☼" +
                "☼   ║         ☼" +
                "☼╔═╗║         ☼" +
                "☼║☻║║      ☺  ☼" +
                "☼╚╗║║         ☼" +
                "☼ ▼║║         ☼" +
                "☼  ║║         ☼" +
                "☼  ╚╝         ☼" +
                "☼             ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "DOWN");
    }

    @Test
    public void testEatMe1() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼      ☻      ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼  ☺   ╘═►    ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "UP");
    }

    @Test
    public void testEatMe5() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼ ☻           ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼   ╔═╕       ☼" +
                "☼   ╚════╗    ☼" +
                "☼        ║   ☺☼" +
                "☼◄═══════╝    ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "UP");
    }

    @Test
    public void testEatMe12() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼      ╔═╗  ◄╗☼" +
                "☼ ☺  ╘═╝☻║   ║☼" +
                "☼        ║   ║☼" +
                "☼        ║   ║☼" +
                "☼        ╚══╗║☼" +
                "☼           ║║☼" +
                "☼           ╚╝☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "LEFT");
    }

    @Test
     public void testEatMe6() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼     ╔════╕  ☼" +
                "☼     ║       ☼" +
                "☼     ║  ☻    ☼" +
                "☼     ║       ☼" +
                "☼     ║       ☼" +
                "☼╔═══►║       ☼" +
                "☼║    ║       ☼" +
                "☼║    ║       ☼" +
                "☼║╔═══╝       ☼" +
                "☼║╚═══╗    ☺  ☼" +
                "☼╚╗   ║       ☼" +
                "☼ ║   ╚╗      ☼" +
                "☼ ╚════╝      ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "UP");
    }

    @Test
    public void testEatMe9() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼        ☻    ☼" +
                "☼   ╔╗        ☼" +
                "☼   ║║        ☼" +
                "☼   ║║        ☼" +
                "☼   ║║        ☼" +
                "☼   ║║        ☼" +
                "☼   ║║        ☼" +
                "☼   ║║        ☼" +
                "☼ ☺ ║╚══►     ☼" +
                "☼   ╚══╕      ☼" +
                "☼             ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "DOWN");
    }

    @Test
    public void testEatMe13() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼ ╔╗     ╓    ☼" +
                "☼ ║▼     ║    ☼" +
                "☼ ║      ║    ☼" +
                "☼ ║      ║    ☼" +
                "☼ ║      ║    ☼" +
                "☼ ║      ║    ☼" +
                "☼☻║      ║    ☼" +
                "☼☺║      ║    ☼" +
                "☼ ╚══════╝    ☼" +
                "☼             ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "RIGHT");
    }

    @Test
    public void testEatMe14() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼☺            ☼" +
                "☼╔══════╗     ☼" +
                "☼▼      ║     ☼" +
                "☼       ║     ☼" +
                "☼       ║   ╓ ☼" +
                "☼       ║   ║ ☼" +
                "☼       ║   ║ ☼" +
                "☼       ║   ║ ☼" +
                "☼       ║   ║ ☼" +
                "☼       ║   ║ ☼" +
                "☼       ╚═══╝ ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "RIGHT");
    }

    @Test
    public void testEatMe7() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼☻    ☺       ☼" +
                "☼◄══════╗     ☼" +
                "☼       ║     ☼" +
                "☼       ║     ☼" +
                "☼       ║     ☼" +
                "☼       ║   ╓ ☼" +
                "☼       ╚═══╝ ☼" +
                "☼             ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "DOWN");
    }

    @Test
    public void testEatMe10() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼      ☺     ☻☼" +
                "☼    ╔═══════►☼" +
                "☼    ║        ☼" +
                "☼    ║        ☼" +
                "☼    ║        ☼" +
                "☼ ╓  ║        ☼" +
                "☼ ╚══╝        ☼" +
                "☼             ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "DOWN");
    }

    @Test
    public void testEatMe8() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼             ☼" +
                "☼      ╔═══╗  ☼" +
                "☼   ☻╔═╝   ║  ☼" +
                "☼   ╔╝     ║  ☼" +
                "☼ ╘═╝▲     ║☺ ☼" +
                "☼    ║     ║  ☼" +
                "☼    ║  ╔══╝  ☼" +
                "☼    ║  ║     ☼" +
                "☼    ║  ║     ☼" +
                "☼    ║  ║     ☼" +
                "☼    ║  ║     ☼" +
                "☼    ║  ║     ☼" +
                "☼    ╚══╝     ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "RIGHT");
    }

    @Test
    public void testEatBreak1() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼            ☻☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼☺            ☼" +
                "☼             ☼" +
                "☼◄═════════╕  ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "UP");
    }

    @Test
    public void testEatBreak3() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼      ╘══╗   ☼" +
                "☼         ║   ☼" +
                "☼         ║   ☼" +
                "☼         ║ ☻ ☼" +
                "☼         ║ ☺ ☼" +
                "☼◄════════╝   ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "DOWN");
    }

    @Test
    public void testEatBreak2() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼            ☻☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼▲            ☼" +
                "☼║        ☺   ☼" +
                "☼║            ☼" +
                "☼║            ☼" +
                "☼╙            ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "RIGHT");
    }

    @Test
     public void testEatBreak4() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼ ╔╗          ☼" +
                "☼ ║╚═►        ☼" +
                "☼ ║           ☼" +
                "☼ ║           ☼" +
                "☼ ║           ☼" +
                "☼ ╚╕          ☼" +
                "☼  ☺☻         ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "DOWN");
    }

    @Test
    public void testEatBreak5() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼             ☼" +
                "☼ ☺       ╘══►☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼☻            ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "UP");
    }

    @Test
    public void testEatMe2() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼ ☺☻          ☼" +
                "☼  ◄╕         ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "LEFT");
    }

    @Test
    public void testEatMe3() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼          ☻  ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼   ╔╗   ☺    ☼" +
                "☼   ▼╚══╕     ☼" +
                "☼             ☼"+
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "DOWN");
    }

    @Test
    public void testEatMe4() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼      ╔╗     ☼" +
                "☼      ▼║    ☺☼" +
                "☼☻      ║     ☼" +
                "☼       ║     ☼" +
                "☼       ║     ☼" +
                "☼       ╚══╗  ☼" +
                "☼          ║  ☼" +
                "☼          ║  ☼" +
                "☼          ║  ☼" +
                "☼          ╙  ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "LEFT");
    }

    @Test
    public void testEatMe11() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼             ☼" +
                "☼           ╓ ☼" +
                "☼         ☻ ║ ☼" +
                "☼  ╔══════► ║ ☼" +
                "☼  ║        ║ ☼" +
                "☼  ║        ║ ☼" +
                "☼  ║        ║ ☼" +
                "☼  ║        ║ ☼" +
                "☼  ║        ║ ☼" +
                "☼☺ ║        ║ ☼" +
                "☼  ╚════════╝ ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "RIGHT");
    }

    @Test
    public void testNotSameDirection() {
        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼  ☻          ☼" +
                "☼  ◄╕         ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼       ☺     ☼" +
                "☼             ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "DOWN");

        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼           ☻ ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼  ◄╕   ☺     ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "DOWN");

        assertB("☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼  ☻          ☼" +
                "☼             ☼" +
                "☼      ☺       ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼             ☼" +
                "☼    ◄╕       ☼" +
                "☼             ☼" +
                "☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼", "UP");

        assertB("☼☼☼☼☼☼" +
                "☼  ☻ ☼" +
                "☼☺ ╘►☼" +
                "☼    ☼" +
                "☼    ☼" +
                "☼☼☼☼☼☼", "DOWN");

    }

    private void assertB(String boardString, String expected) {
        // given
        YourSolver solver = new YourSolver(new RandomDice());

        // when
        String direction = solver.get((Board)new Board().forString(
                boardString));

        // then
        assertEquals(expected, direction);
    }
}
